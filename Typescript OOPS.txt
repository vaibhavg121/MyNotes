*A class is a blueprint, or recipe for an object. A class defines what every instance of it should contain

Classes may contain attributes (properties), as well as methods (functions), collectively known as members.

When we use the term object, we’re referring to an instance of a class.

*Consider an array, an array is a class. When we create an array, we’re actually creating an instance, or object, of the array class.
Once we’ve created that object, we have access to the properties and functions that TypeScript has declared inside the array class. Like like array.length or array.splice().


*Creating a class :-
To create a class we use the class keyword, followed by a unique name and a code block.
=>
class ClassName {
  //Properties & Methods
}

i.e. =>
e.g: -
=>
class Employee {
  name: "John";
  walk() {
    console.log("Walking......");
  }
}


* Instantiating an object of a class :-
var obj_name = new ClassName();

i.e. => var employee1 = new Employee();

In the example above we create a new object of the Employee class called employee1. The variable can now be used to access the properties and methods of the class.


*Accessing properties & methods of a class :-
syntax =>
object_name.property;
object_name.method();

i.e. =>
employee1.walk();


*Class Expressions :-

var expression_name = class ClassName {
  // class body
}

This is how we declare a class in an expression


=>
var Person = class {
  // attributes
  name = "Unknown";

  // methods
  walk() {
    console.log("Walking...");
  }

}

new Person().walk();
 OR
var p1 = new Person();
p1.walk();

---> In above example,
We can access a class expression by either instantiating it directly with the new keyword, or by assigning it to a variable (thereby creating an object).

* Do not forget to add parantheses () behind the expression name.
* Parantheses are used to CONSTRUCT an Object, if there's a constructor present in the declaration.

# Class COnstructor method :-

=>Empty class with just property names =>
class Person {
  firstName;
  lastName;
}

=>Then, define the constructor method with the keyword - constructor() =>

class Person {
  firstName;
  lastName;

  constructor() {
    //Some code
  }
}

==> Then add the parameters we want to initialize the parameter list & assign them to properties.
=>
class Person {
  firstName;
  lastName;

  constructor(fn:string, ln:string) {
    this.firstName = fn;
    this.lastName = ln;
  }
}

==> Now all of this into an example as given below :---

class Person {

  firstName;
  lastName;

  constructor(fn:string, ln:string) {

    this.firstName = fn;
    this.lastName = ln;
  }
}

var p1 = new Person("John", "Doe");

console.log(p1);

===> What we did here is - Instantiated an object p1 from the class Person.

--------------------------------------------------------------------------------------------------

Typescript objects creation without classes (Direct):-

*Object Literals :-
Object literal means literally directly creating objects: -

e.g =>
var person = {
  firstName: "John",
  lastName: "Doe",
  age: 20
}

console.log("Name: " + person.firstName + " " + person.lastName);
console.log("Age: " + person.age);
Here, we use the dot notation to access properties


*Instantiating a new object with constructor method (Or a constructor function) :-
=>
Syntax =>
function constructor_name(property1, property2, ...) {
  this.property1 = property1;
  this.some_property_name = property2;
}

===> Now we create a new instance like this ===> Using "new" keyword
=>
var object_name = new constructor_name(argument1, argument2);


*Notes - 
No need to always create classes to be able to create objects.
We can directly create them by either creating object-literals or with a constructor method.

this keyword in a constructor method refers to the calling object, the object that will be created from the constructor.

--------------------------------------------------------------------------------------------------------

* Inheritance :-

The main class is known as parent or super class.
The class that inherits properties from parent is called child class or sub class.

* How to create a child class ?
=>
parent --->
class ParentClass {
  //Some code
}

child --->
class ChildClass extends ParentClass {
  //Some code
}

===> Example =>

// This is parent class 
class Animal {
  move() {
    console.log("Animal parent class. Move...");
  }
}

//Child class 
class Dog extends Animal {
  growl() {
    console.log("Dog child class. A dog can growl, but a duck can't. Grrr...");
  }
}

# As this Dog is a child class of Animal - It has access to it's own method growl() (That's obvious)
But- It also has access to the move() method of Animal class.

i.e. ---> If we instantiate an object using Dog class -> We will have access to both the growl() as well as move() methods.

//Another child class
class Duck extends Animal {
  quack() {
    console.log("Duck Child class. A duck can quack, but a dog can't. Quack...");
  }
}

*Now let's instantiate objects from both of these classes -
var goofy = new Dog();
var donald = new Duck();

goofy.move();
goofy.growl();

donald.move();
donald.quack();

Just like this - The objects created using the child class has access to the properties/methods of parent class.

-------------------------------------------------------------------------------------------------

*If a child doesn't have its own constructor, we can use parent's constructor method. =>

Just like this ==>

class Animal {
  name:string;
  constructor(name) {
    this.name = name;
  }
}

class Dog extends Animal {
  growl() {
    console.log("Dog child class. A dog can growl, but a duck can't. Grrr...");
  }
}

var dog1 = new Dog("Pluto");

console.log("Goofy's dog's name is " + dog1.name);

//As we can see, even though the Dog class has no constructor method which can accept parameters to name our dog as Pluto, what happened here is - the Dog class used the constructor method of Animal class bcz it's it's parent class.

-------------------

Now VImp point --->

If u follow the above protocol & try to access the property of parent into the child where the child has it's own constructor, this will throw an error.
Have a look at the example - 

===>
class Animal {
  name:string;
  constructor(name) {
    this.name = name;
  }
}

class Dog extends Animal {
  isGoodBoy:boolean;
  constructor(isGoodBoy) {
    this.isGoodBoy = isGoodBoy;
  }

  growl() {
    if (this.isGoodBoy) {
      console.log(name + " doesn't growl, he's a good boy");
    } else {
      console.log("Grrrrr....");
    }
  }
}

var dog1 = new Dog("Pluto");

console.log("Goofy's dog's name is " + dog1.name);

//Here the child Dog has it's own constructor & in that case u cannot directly use the parents properties. It throws an error.

That error means --->
---> We need to bring everything from the parent constructor into the child constructor, before we can actually access it.
And how to we manage to do that and bring everything from parent constructor to the child construtor ?
=> By using "super()" keyword

* Now, how it actually works? The code ==>

class Animal {
  name:string;
  constructor(name) {
    this.name = name;
  }
}

class Dog extends Animal {
  isGoodBoy:boolean;
  constructor(name, isGoodBoy) {
    super(name);
    this.isGoodBoy = isGoodBoy;
  }

  growl() {
    if (this.isGoodBoy) {
      console.log(name + " doesn't growl, he's a good boy");
    } else {
      console.log("Grrrrr....");
    }
  }
}

var dog1 = new Dog("Pluto", true);

console.log("Goofy's dog's name is " + dog1.name);

# Explanation =>
Dog wanted to use the name property of its parent-Animal.
When we used - super(name) - It meant importing the parents name property into the child constructor.

In short, super makes the reference to the parent class possible in case of child with it's own constructor.

# Notes -
Inheritance is inheriting properties & methods from parent class into the child class.

"extends" keyword means one class inherits from another.

The child class will automatically have all the functionality of its paret class 
UNLESS - it has its own constructor.

In that case, super() keyword comes into picture.
Super() needs o have any parameters that the parent class constructor has.
i.e -> As in above example -> parent constructor had "name" parameter. 
So, the super syntax became - super(name) 

----------------------------------------------------------------------------------------------------------

Composition -

* Composition is a type of relationship between classes where one class contains another instead of inheriting from another.

Sometimes composition is favoured above Inheritance bcz it’s more flexible and allows us to design loosely coupled applications.

* Where does composition come into picture?
=> When the child class is heavily dependant on its parent where its dependent on a lot of inherited properties, 
If we change something in the parent class, it might totally break the functionality of the children.

That's why the solution is Composition.

Instead of creating a child class that inherits functionality from a parent class, we create stand-alone classes that contain other classes.
Simply put, "We create an object instance of a class inside another class."

* Understanding with example ===>

class Animal {

  eat() {
    console.log("Eating...");
  }

  walk() {
    console.log("Walking...");
  }
}

class Dog extends Animal {}
class Cat extends Animal {}


--> here, we can create instances of Dog & Cat from Animal.
But if we want to create an instance of lets say - Fish, then a problem arises.

We dont wanna inherit the walk() method from Animal but we do want the eat() method.

This cannot be solved by just Inheritance,
bcz => class Fish extends Animal {}
will inherit the walk() method as well.

So, to solve this issue -> the solution is implementing Composition.

Now carefully observe the following piece of code ===>  Keeping in mind the reference to above Dog, Fish situation

===>

class Animal {

  eat() {
    console.log("Eating...");
  }
}

class Walkable {

  walk() {
    console.log("Walking...");
  }
}

class Swimmable {

  swim() {
    console.log("Swimming...");
  }
}

class Dog {

  animal;
  walkable;
  swimmable;

  constructor() {
    this.animal = new Animal();
    this.walkable = new Walkable();
    this.swimmable = new Swimmable();
  }
}

class Fish {

  animal;
  swimmable;

  constructor() {
    this.animal = new Animal();
    this.swimmable = new Swimmable();
  }
}


--->

What we did here, is creating separate classes for each of their characteristics 
and the.....
creating object instances of these classes inside another classes.

This provides us the flexibility 
&
we can make Dogs eatable, walkable & Swimmable
and Fish as just eatable & Swimmable.


have a look at another more thorough example to further clear the concept ->

===>
class Walkable {

  walk() {
    console.log("Walking...");
  }
}

class Swimmable {

  swim() {
    console.log("Swimming...");
  }
}

class Flyable {

  fly() {
    console.log("Flying...");
  }
}

class Fish {

  swimmable;

  constructor() {
    this.swimmable = new Swimmable();
  }
}

class Bird {

  walkable;
  swimmable;
  flyable;

  constructor() {
    this.walkable = new Walkable();
    this.swimmable = new Swimmable();
    this.flyable = new Flyable();
  }
}

console.log("Nemo the fish's activities:");
var nemo = new Fish();
nemo.swimmable.swim();

console.log("Tweety the bird's activities:");
var tweety = new Bird();
tweety.walkable.walk();
tweety.swimmable.swim();
tweety.flyable.fly();

----------------------------------------

Inheritance vs Composition :-

*Composition is an alternative to Inheritance.

Adv. of Inheritance - 
Reusable code & easy to understand.

Disadv. of Ineritance - 
Tighlty coupled & fragile & can be over abused.

Adv. of Composition - 
Flexibility & loosely coupled.

Disadv. of Composition - 
Little complicated to implement at start.


# Notes - 
* Composition us instantiating and accesssing a class inside another class (instead of inheriting)
* Evey inheritance relationship can be converted to Composition.

----------------------------------------------------------------------------------------------------------
